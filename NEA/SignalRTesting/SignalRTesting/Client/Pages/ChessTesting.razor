@page "/chesstesting"
@inject HttpClient Http
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@using SignalRTesting.Shared
@inject NavigationManager Navigation

<PageTitle>Chess Testing</PageTitle>

@if (_board != null)
{
    @foreach (string s in StringifyBoard())
    {
        <h3>@s</h3>
    }
}

<h3>connected = @IsConnected</h3>
<h3>colour = @_colour</h3>
<h3>message = @_message</h3>
<h3>yourTurn = @_yourTurn</h3>
<h3>player1Name = @(_p1 != null ? _p1.Name : null)</h3>
<h3>player2Name = @(_p2 != null ? _p2.Name : null)</h3>

<div class="form-group">
    <label>
        Email:
        <input @bind="email" />
    </label>
</div>
<div class="form-group">
    <label>
        Name:
        <input @bind="name" />
    </label>
</div>
<button @onclick="UpdateUser" disabled="@(!IsConnected)">UpdateUser</button>

<div class="form-group">
    <label>
        Start Row:
        <input @bind="sr" />
    </label>
</div>
<div class="form-group">
    <label>
        Start Col:
        <input @bind="sc" />
    </label>
</div>
<div class="form-group">
    <label>
        End Row:
        <input @bind="er" />
    </label>
</div>
<div class="form-group">
    <label>
        End Col:
        <input @bind="ec" />
    </label>
</div>
<button @onclick="HandleMove" disabled="@(!IsConnected)">HandleMove</button>

@code {
    public string[][]? _board;
    public string? _colour;
    public string? _message;
    public bool? _yourTurn;
    public Player? _p1;
    public Player? _p2;

    private HubConnection? hubConnection;
    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    private string? email;
    private string? name;

    private int? sr = 0;
    private int? sc = 0;
    private int? er = 0;
    private int? ec = 0;


    protected override async Task OnInitializedAsync()
    {
        await StartHubConnection();
    }

    private async Task StartHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chessgamehub"))
            .Build();

        SetGameListener();

        await hubConnection.StartAsync();
    }

    private void SetGameListener()
    {
        if (hubConnection == null)
        {
            return;
        }
        hubConnection.On<string[][]>("RenderBoard", (board) =>
        {
            _board = board;
            StateHasChanged();
        });
        hubConnection.On<string>("Colour", (colour) =>
        {
            _colour = colour;
            StateHasChanged();
        });
        hubConnection.On<string>("Turn", (player) =>
        {
            if (player == _colour)
            {
                _message = $"You're up. What's your move?";
                _yourTurn = true;
            }
            else
            {
                _message = $"{player} is thinking...";
                _yourTurn = false;
            }
            StateHasChanged();
        });
        hubConnection.On<Player, Player>("RollCall", (p1, p2) =>
        {
            _p1 = p1;
            _p2 = p2;
            StateHasChanged();
        });
        hubConnection.On<bool>("Concede", async (x) =>
        {
            _message = $"Your opponent conceded. You win";
            _yourTurn = false;
            await hubConnection.DisposeAsync();
            StateHasChanged();
        });
        hubConnection.On<string, string[][]>("Victory", async (player, board) =>
        {
            _yourTurn = false;
            if (player == _colour)
            {
                _message = "You win!";
            }
            else
            {
                _message = "You lose!";
            }
            _board = board;
            _p1 = null;
            _p2 = null;
            _colour = null;
            await hubConnection.DisposeAsync();
            StateHasChanged();
        });
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public async Task UpdateUser()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateUser", email, name);
        }
    }

    public async Task HandleMove()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("AttemptMove", sr, sc, er, ec);
        }
    }

    public List<string> StringifyBoard()
    {
        var r = new List<string>();
        for (int i = 0; i < _board.Count(); i++)
        {
            string temp = "";
            for (int j = 0; j < _board[i].Count(); j++)
            {
                temp += _board[i][j];
            }
            r.Add(temp);
        }
        return r;
    }
}
