@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using CheckAndMate.Data
@using CheckAndMate.Services
@using Microsoft.AspNetCore.Components.Forms

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject UserService UserService

<PageTitle>Profile</PageTitle>

<PageScript Src="./Components/Account/Pages/Manage/Index.razor.js" />

<h3>Profile</h3>
<StatusMessage />

@if (Input == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                    <label for="username" class="form-label">Username</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Nickname" class="form-control" id="nicknameInput" placeholder="Please enter your nickname." />
                    <label for="nickname" class="form-label">Nickname</label>
                    <ValidationMessage For="() => Input.Nickname" class="text-danger" />
                </div>
                <button type="button" class="w-100 btn btn-secondary mb-3" id="regenerateNicknameButton" title="Regenerate Nickname">
                    Regenerate Nickname &#x21bb;
                </button>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? nickname;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        nickname = user.Nickname;

        if (nickname != null)
        {
            Input.Nickname ??= nickname;
        }
    }

    private async Task OnValidSubmitAsync()
    {
        bool isTaken = UserService.IsNicknameTaken(Input.Nickname);

        if (isTaken && Input.Nickname != nickname)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Nickname taken.", HttpContext);
        }

        if (Input.Nickname != nickname)
        {
            user.Nickname = Input.Nickname;
            var updateResult = await UserManager.UpdateAsync(user);
            if (!updateResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set nickname.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private class InputModel
    {
        [Display(Name = "Nickname")]
        public string Nickname { get; set; } = "";
    }
}
