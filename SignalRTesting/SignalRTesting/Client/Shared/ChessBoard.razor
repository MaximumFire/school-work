@using System.Drawing

<div class="chess-board border rounded">
    @for (int row = 0; row < 8; row++)
    {
        <div class="chess-row">
            @for (int col = 0; col < 8; col++)
            {
                var ROW = row;
                var COL = col;
                var piece = Board[ROW, COL];
                <div class="chess-square @(IsWhiteSquare(ROW, COL) ? "white" : "black") prevent-select"
                     @onclick="() => OnSquareClick(ROW, COL)"
                     @ondragover="OnDragOver"
                     @ondragover:preventDefault="true"
                     @ondrop="(e) => OnDrop(e, ROW, COL)"
                     @ondragstart="(e) => OnDragStart(e, ROW, COL)">
                    <img src="@GetPieceImage(piece)" class="chess-piece prevent-select"
                        draggable="@(string.IsNullOrEmpty(piece) ? "false" : "true")"/>
                </div>
            }
            <div class="rank-label">@(8 - row)</div>
        </div>
    }
    <div class="chess-row">
        @for (char file = 'a'; file <= 'h'; file++)
        {
            <div class="label-square">
                <div class="file-label">@file</div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string[,] InitialBoard { get; set; } = new string[8, 8];

    private string[,] Board = new string[8, 8];
    private int? DragStartRow = null;
    private int? DragStartCol = null;

    protected override void OnInitialized()
    {
        InitializeBoard();
    }

    private void InitializeBoard()
    {
        // Copy the initial board setup to the board
        for (int row = 0; row < 8; row++)
        {
            for (int col = 0; col < 8; col++)
            {
                Board[row, col] = InitialBoard[row, col];
            }
        }
    }

    private bool IsWhiteSquare(int row, int col)
    {
        return (row + col) % 2 == 0;
    }

    private string GetPieceImage(string piece)
    {
        return $"images/{piece}.png"; // Assumes you have images named like 'bR.png', 'wP.png', etc.
    }

    private void OnSquareClick(int row, int col)
    {
        if (DragStartRow.HasValue && DragStartCol.HasValue)
        {
            MovePiece(DragStartRow.Value, DragStartCol.Value, row, col);
            DragStartRow = null;
            DragStartCol = null;
        }
        else
        {
            DragStartRow = row;
            DragStartCol = col;
        }
    }

    private void OnDragStart(DragEventArgs e, int row, int col)
    {
        DragStartRow = row;
        DragStartCol = col;
    }

    private void OnDragOver(DragEventArgs e)
    {

        return;
    }

    private void OnDrop(DragEventArgs e, int row, int col)
    {
        if (DragStartRow.HasValue && DragStartCol.HasValue)
        {
            MovePiece(DragStartRow.Value, DragStartCol.Value, row, col);
            DragStartRow = null;
            DragStartCol = null;
        }
    }

    private void MovePiece(int startRow, int startCol, int endRow, int endCol)
    {
        var piece = Board[startRow, startCol];
        Board[startRow, startCol] =  "--";
        Board[endRow, endCol] = piece;
    }
}
