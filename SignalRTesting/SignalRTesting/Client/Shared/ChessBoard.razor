<div class="chess-board border rounded">
    <div class="chess-grid @(IsWhite ? "" : "black")">
        @for (int r = 0; r < 8; r++)
        {
            @for (int c = 0; c < 8; c++)
            {
                var R = r;
                var C = c;
                var piece = Board[R, C];
                @if (piece != "--")
                {
                    <div class="chess-piece @(piece.ToLower()) square-@(R)-@(C)" style=""></div>
                }
            }
        }
        <div class="hover-square" style="visibility: hidden;">
            <svg viewBox="0 0 100 100">
                <rect x="0" y="0" width="100" height="100" stroke="rgba(255, 255, 255, 0.65)" stroke-width="10" fill="none"></rect>
            </svg>
        </div>
        <div id="prev-move-start" class="highlight" style="visibility: hidden;"></div>
        <div id="prev-move-end" class="highlght" style="visibility: hidden;"></div>
        <div id="curr-move-start" class="highlight" style="visibility: hidden;"></div>
    </div>
    <div class="chess-ranks">
        @for (int k = 0; k < 8; k++)
        {
            <div class="chess-label rank">
                <text class="chess-label-text">@GetRank(k)</text>
            </div>
        }
    </div>
    <div class="chess-files">
        @for (int k = 0; k < 8; k++)
        {
            <div class="chess-label file">
                <text class="chess-label-text">@GetFile(k)</text>
            </div>
        }
    </div>

</div>


@code {
    [Parameter]
    public string[,] InitialBoard { get; set; } = new string[8, 8];

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;
    private IJSObjectReference? _jsModule;

    public bool IsWhite = true;
    public string[,] Board = new string[8, 8];
    private Dictionary<int, char> ColToFile = new Dictionary<int, char>
    {
        {0, 'A'}, {1, 'B'}, {2, 'C'}, {3, 'D'}, {4, 'E'}, {5, 'F'}, {6, 'G'}, {7, 'H'}
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule ??= await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/ChessBoard.js");
            await _jsModule.InvokeVoidAsync("initialise");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        InitializeBoard();
    }

    private void InitializeBoard()
    {
        for (int i = 0; i < 8; i++)
        {
            for (int j = 0; j < 8; j++)
            {
                Board[i, j] = InitialBoard[i, j];
            }
        }
    }

    private bool IsWhiteSquare(int row, int col)
    {
        return (row + col) % 2 == 0;
    }

    private string GetPieceImage(string piece)
    {
        return $"images/old/{piece}.png";
    }

    private string GetTransformStyle(int r, int c)
    {
        return $"transform: translate({c}00%, {r}00%);";
    }

    private int GetRank(int row)
    {
        if (IsWhite)
        {
            return 8 - row;
        }
        return row + 1;
    }

    private string GetFile(int col)
    {
        if (IsWhite)
        {
            return ColToFile[col].ToString().ToLower();
        }
        return ColToFile[7 - col].ToString().ToLower();
    }
}
